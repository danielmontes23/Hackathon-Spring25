---
import Layout from '../layouts/Layout.astro';
import '../styles/Global.css';
import DynamicResumeSections from '../components/DynamicResumeSections.jsx';
---

<Layout>
  <main style="max-width: 700px; margin: 2rem auto;">
    <div class="sticky-element" style="display: flex; justify-content: flex-end; margin-bottom: 1rem;">
      <label style="font-weight: 500; margin-right: 0.5rem;">Theme:</label>
      <select id="theme-select">
        <option value="default">Default</option>
        <option value="dark">Dark</option>
        <option value="blue">Blue</option>
        <option value="green">Green</option>
      </select>
    </div>
    <h1>Resume Builder</h1>
    <form id="resume-form">
      <section>
        <h2>Personal Info</h2>
        <label>
          First Name:
          <input type="text" name="first_name" id="first_name" required />
        </label>
        <label>
          Last Name:
          <input type="text" name="last_name" id="last_name" required />
        </label>
        <label>
          Title:
          <input type="text" name="title" id="title" required />
        </label>
        <label>
          First Address Line:
          <input type="text" name="faddress" id="faddress" required />
        </label>
        <label>
          Last Address Line:
          <input type="text" name="laddress" id="laddress" required />
        </label>
      </section>

      <section id="social-links-section">
        <h2>Social Media Links</h2>
        <div id="social-links-list"></div>
        <button type="button" id="add-social-link">Add Social Link</button>
      </section>

      <section id="emails-section">
        <h2>Emails</h2>
        <div id="emails-list"></div>
        <button type="button" id="add-email">Add Email</button>
      </section>
      <section id="phones-section">
        <h2>Phone Numbers</h2>
        <div id="phones-list"></div>
        <button type="button" id="add-phone">Add Phone Number</button>
      </section>

      <DynamicResumeSections client:only="react" />
      <button type="submit">Generate Resume</button>
    </form>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Phone input: numbers only
        const phoneInput = document.getElementById('phone');
        if (phoneInput) {
          phoneInput.addEventListener('input', () => {
            phoneInput.value = phoneInput.value.replace(/\D/g, '');
          });
        }

        // Persist first_name, last_name, email, phone
        ['first_name', 'last_name', 'email', 'phone'].forEach(field => {
          const input = document.getElementById(field);
          if (input) {
            const saved = localStorage.getItem(field);
            if (saved) input.value = saved;
            input.addEventListener('input', () => {
              localStorage.setItem(field, input.value);
            });
          }
        });

        // Social Media Links logic
        const socialLinksList = document.getElementById('social-links-list');
        const addSocialBtn = document.getElementById('add-social-link');
        let socialLinks = JSON.parse(localStorage.getItem('socialLinks') || '[]');

        function renderSocialLinks() {
          socialLinksList.innerHTML = '';
          socialLinks.forEach((link, idx) => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.gap = '0.5rem';
            container.style.marginBottom = '0.7rem';

            const platformInput = document.createElement('input');
            platformInput.type = 'text';
            platformInput.placeholder = 'Platform (e.g. LinkedIn)';
            platformInput.value = link.platform || '';
            platformInput.required = false;
            platformInput.style.flex = '1';
            platformInput.addEventListener('input', e => {
              socialLinks[idx].platform = e.target.value;
              localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
            });

            const urlInput = document.createElement('input');
            urlInput.type = 'url';
            urlInput.placeholder = 'Profile URL';
            urlInput.value = link.url || '';
            urlInput.required = false;
            urlInput.style.flex = '2';
            urlInput.addEventListener('input', e => {
              socialLinks[idx].url = e.target.value;
              localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
            });

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Delete';
            removeBtn.style.marginLeft = '0.5rem';
            removeBtn.addEventListener('click', () => {
              socialLinks.splice(idx, 1);
              localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
              renderSocialLinks();
            });

            container.appendChild(platformInput);
            container.appendChild(urlInput);
            container.appendChild(removeBtn);

            socialLinksList.appendChild(container);
          });
        }

        addSocialBtn.addEventListener('click', () => {
          socialLinks.push({ platform: '', url: '' });
          localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
          renderSocialLinks();
        });

        renderSocialLinks();

        // Emails logic
        const emailsList = document.getElementById('emails-list');
        const addEmailBtn = document.getElementById('add-email');
        let emails = JSON.parse(localStorage.getItem('emails') || '[]');

        function renderEmails() {
          emailsList.innerHTML = '';
          emails.forEach((item, idx) => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.gap = '0.5rem';
            container.style.marginBottom = '0.7rem';

            const labelSelect = document.createElement('select');
            ['Personal', 'Work', 'Home'].forEach(option => {
              const opt = document.createElement('option');
              opt.value = option;
              opt.textContent = option;
              if (item.label === option) opt.selected = true;
              labelSelect.appendChild(opt);
            });
            labelSelect.addEventListener('change', e => {
              emails[idx].label = e.target.value;
              localStorage.setItem('emails', JSON.stringify(emails));
            });

            const emailInput = document.createElement('input');
            emailInput.type = 'email';
            emailInput.placeholder = 'Email address';
            emailInput.value = item.email || '';
            emailInput.required = false;
            emailInput.style.flex = '2';
            emailInput.addEventListener('input', e => {
              emails[idx].email = e.target.value;
              localStorage.setItem('emails', JSON.stringify(emails));
            });

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Delete';
            removeBtn.addEventListener('click', () => {
              emails.splice(idx, 1);
              localStorage.setItem('emails', JSON.stringify(emails));
              renderEmails();
            });

            container.appendChild(labelSelect);
            container.appendChild(emailInput);
            container.appendChild(removeBtn);

            emailsList.appendChild(container);
          });
        }

        addEmailBtn.addEventListener('click', () => {
          emails.push({ label: 'Personal', email: '' });
          localStorage.setItem('emails', JSON.stringify(emails));
          renderEmails();
        });
        renderEmails();

        // Phones logic
        const phonesList = document.getElementById('phones-list');
        const addPhoneBtn = document.getElementById('add-phone');
        let phones = JSON.parse(localStorage.getItem('phones') || '[]');

        function renderPhones() {
          phonesList.innerHTML = '';
          phones.forEach((item, idx) => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.gap = '0.5rem';
            container.style.marginBottom = '0.7rem';

            const labelSelect = document.createElement('select');
            ['Personal', 'Work', 'Home'].forEach(option => {
              const opt = document.createElement('option');
              opt.value = option;
              opt.textContent = option;
              if (item.label === option) opt.selected = true;
              labelSelect.appendChild(opt);
            });
            labelSelect.addEventListener('change', e => {
              phones[idx].label = e.target.value;
              localStorage.setItem('phones', JSON.stringify(phones));
            });

            const phoneInput = document.createElement('input');
            phoneInput.type = 'tel';
            phoneInput.placeholder = 'Phone number';
            phoneInput.value = item.phone || '';
            phoneInput.required = false;
            phoneInput.pattern = '^\\d{10,15}$';
            phoneInput.maxLength = 15;
            phoneInput.inputMode = 'tel';
            phoneInput.style.flex = '2';
            phoneInput.title = "Please enter a valid phone number (numbers only, 10-15 digits)";
            phoneInput.addEventListener('input', e => {
              phoneInput.value = phoneInput.value.replace(/\D/g, '');
              phones[idx].phone = phoneInput.value;
              localStorage.setItem('phones', JSON.stringify(phones));
            });

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Delete';
            removeBtn.addEventListener('click', () => {
              phones.splice(idx, 1);
              localStorage.setItem('phones', JSON.stringify(phones));
              renderPhones();
            });

            container.appendChild(labelSelect);
            container.appendChild(phoneInput);
            container.appendChild(removeBtn);

            phonesList.appendChild(container);
          });
        }

        addPhoneBtn.addEventListener('click', () => {
          phones.push({ label: 'Personal', phone: '' });
          localStorage.setItem('phones', JSON.stringify(phones));
          renderPhones();
        });
        renderPhones();

        // Form validation for at least one email and phone with label
        const form = document.getElementById('resume-form');
        form.addEventListener('submit', (e) => {
          const emails = JSON.parse(localStorage.getItem('emails') || '[]');
          const validEmails = emails.filter(item => item.email && item.label);
          if (validEmails.length < 1) {
            alert('Please add at least one email with a label.');
            e.preventDefault();
            return;
          }
          const phones = JSON.parse(localStorage.getItem('phones') || '[]');
          const validPhones = phones.filter(item => item.phone && item.label);
          if (validPhones.length < 1) {
            alert('Please add at least one phone number with a label.');
            e.preventDefault();
            return;
          }
        });

        // Theme switcher
        const themeSelect = document.getElementById('theme-select');
        const savedTheme = localStorage.getItem('theme') || 'default';
        ['theme-dark', 'theme-blue', 'theme-green'].forEach(cls => {
          document.body.classList.remove(cls);
          document.documentElement.classList.remove(cls);
        });
        if (savedTheme !== 'default') {
          document.body.classList.add('theme-' + savedTheme);
          document.documentElement.classList.add('theme-' + savedTheme);
        }
        themeSelect.value = savedTheme;

        themeSelect.addEventListener('change', (e) => {
          ['theme-dark', 'theme-blue', 'theme-green'].forEach(cls => {
            document.body.classList.remove(cls);
            document.documentElement.classList.remove(cls);
          });
          if (e.target.value !== 'default') {
            document.body.classList.add('theme-' + e.target.value);
            document.documentElement.classList.add('theme-' + e.target.value);
          }
          localStorage.setItem('theme', e.target.value);
        });
      });
    </script>
    <script>
      // Unicode-safe base64 encoding
      function b64EncodeUnicode(str) {
        return btoa(unescape(encodeURIComponent(str)));
      }

      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('resume-form');
        form.addEventListener('submit', async (e) => {
          e.preventDefault();

          const data = {
            first_name: document.getElementById('first_name').value,
            last_name: document.getElementById('last_name').value,
            socialLinks: JSON.parse(localStorage.getItem('socialLinks') || '[]'),
            emails: JSON.parse(localStorage.getItem('emails') || '[]'),
            phones: JSON.parse(localStorage.getItem('phones') || '[]'),
            highSchool: JSON.parse(localStorage.getItem('highSchool') || '{}'),
            college: JSON.parse(localStorage.getItem('college') || '{}'),
            noCollege: JSON.parse(localStorage.getItem('noCollege') || 'false'),
            education: JSON.parse(localStorage.getItem('education') || '[]'),
            experience: JSON.parse(localStorage.getItem('experience') || '[]'),
            skills: JSON.parse(localStorage.getItem('skills') || '[]'),
            customSections: JSON.parse(localStorage.getItem('customSections') || '[]'),
            color: localStorage.getItem('color') || 'blue',
            style: localStorage.getItem('style') || 'classic',
          };

          // 1. Set color (GET)
          await fetch(`http://localhost:5000/setcolor/${b64EncodeUnicode(data.color)}`);

          // 2. Set style (GET)
          await fetch(`http://localhost:5000/setstyle/${b64EncodeUnicode(data.style)}`);

          // 3. Set personal info (GET)
          const personals = {
            fname: data.first_name,
            lname: data.last_name,
            title: document.getElementById('title')?.value || '',
            faddress: document.getElementById('faddress')?.value || '',
            laddress: document.getElementById('laddress')?.value || ''
          };
          await fetch(`http://localhost:5000/setpersonals/${b64EncodeUnicode(JSON.stringify(personals))}`);

          // 4. Add sections (GET) - education and experience
          for (const edu of data.education) {
            const sectionObj = { section: 'Education', section_data: edu };
            await fetch(`http://localhost:5000/section_add2/${b64EncodeUnicode(JSON.stringify(sectionObj))}`);
          }
          for (const exp of data.experience) {
            const sectionObj = { section: 'Experience', section_data: exp };
            await fetch(`http://localhost:5000/section_add2/${b64EncodeUnicode(JSON.stringify(sectionObj))}`);
          }
          // Add skills as a section
          if (data.skills && data.skills.length > 0) {
            const sectionObj = { section: 'Skills', section_data: data.skills };
            await fetch(`http://localhost:5000/section_add2/${b64EncodeUnicode(JSON.stringify(sectionObj))}`);
          }
          // Add custom sections
          for (const custom of data.customSections) {
            const sectionObj = { section: custom.label, section_data: custom.content };
            await fetch(`http://localhost:5000/section_add2/${b64EncodeUnicode(JSON.stringify(sectionObj))}`);
          }

          // 5. Generate PDF (GET)
          const response = await fetch('http://localhost:5000/generate');

          if (response.ok) {
            alert('Resume generated! Download link coming soon.');
            window.location.href = 'http://localhost:5000/download';
          } else {
            alert('Failed to generate resume.');
          }
        });
      });
    </script>
  </main>
</Layout>