---
import Layout from '../layouts/Layout.astro';
import '../styles/Global.css';
import DynamicResumeSections from '../components/DynamicResumeSections.jsx';
---

<Layout>
  <main style="max-width: 700px; margin: 2rem auto;">
    <h1>Resume Builder</h1>
    <form id="resume-form">
      <section>
        <h2>Personal Info</h2>
        <label>
          First Name:
          <input type="text" name="first_name" id="first_name" required />
        </label>
        <label>
          Last Name:
          <input type="text" name="last_name" id="last_name" required />
        </label>
      </section>

      <section id="social-links-section">
        <h2>Social Media Links</h2>
        <div id="social-links-list"></div>
        <button type="button" id="add-social-link">Add Social Link</button>
      </section>

      <section id="emails-section">
        <h2>Emails</h2>
        <div id="emails-list"></div>
        <button type="button" id="add-email">Add Email</button>
      </section>
      <section id="phones-section">
        <h2>Phone Numbers</h2>
        <div id="phones-list"></div>
        <button type="button" id="add-phone">Add Phone Number</button>
      </section>

      <DynamicResumeSections client:load />

      <button type="submit">Generate Resume</button>
    </form>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const phoneInput = document.getElementById('phone');
        if (phoneInput) {
          phoneInput.addEventListener('input', () => {
            phoneInput.value = phoneInput.value.replace(/\D/g, '');
          });
        }

        ['first_name', 'last_name', 'email', 'phone'].forEach(field => {
          const input = document.getElementById(field);
          if (input) {
            // Load from localStorage
            const saved = localStorage.getItem(field);
            if (saved) input.value = saved;
            // Save on change
            input.addEventListener('input', () => {
              localStorage.setItem(field, input.value);
            });
          }
        });

        // Persist DOB
        const dobInput = document.getElementById('dob');
        if (dobInput) {
          const saved = localStorage.getItem('dob');
          if (saved) dobInput.value = saved;
          dobInput.addEventListener('input', () => {
            localStorage.setItem('dob', dobInput.value);
          });
        }

        // Social Media Links logic
        const socialLinksList = document.getElementById('social-links-list');
        const addSocialBtn = document.getElementById('add-social-link');
        let socialLinks = JSON.parse(localStorage.getItem('socialLinks') || '[]');

        function renderSocialLinks() {
          socialLinksList.innerHTML = '';
          socialLinks.forEach((link, idx) => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.gap = '0.5rem';
            container.style.marginBottom = '0.7rem';

            const platformInput = document.createElement('input');
            platformInput.type = 'text';
            platformInput.placeholder = 'Platform (e.g. LinkedIn)';
            platformInput.value = link.platform || '';
            platformInput.required = false;
            platformInput.style.flex = '1';
            platformInput.addEventListener('input', e => {
              socialLinks[idx].platform = e.target.value;
              localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
            });

            const urlInput = document.createElement('input');
            urlInput.type = 'url';
            urlInput.placeholder = 'Profile URL';
            urlInput.value = link.url || '';
            urlInput.required = false;
            urlInput.style.flex = '2';
            urlInput.addEventListener('input', e => {
              socialLinks[idx].url = e.target.value;
              localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
            });

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Delete';
            removeBtn.style.marginLeft = '0.5rem';
            removeBtn.addEventListener('click', () => {
              socialLinks.splice(idx, 1);
              localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
              renderSocialLinks();
            });

            container.appendChild(platformInput);
            container.appendChild(urlInput);
            container.appendChild(removeBtn);

            socialLinksList.appendChild(container);
          });
        }

        addSocialBtn.addEventListener('click', () => {
          socialLinks.push({ platform: '', url: '' });
          localStorage.setItem('socialLinks', JSON.stringify(socialLinks));
          renderSocialLinks();
        });

        renderSocialLinks();

        // Emails logic
        const emailsList = document.getElementById('emails-list');
        const addEmailBtn = document.getElementById('add-email');
        let emails = JSON.parse(localStorage.getItem('emails') || '[]');

        function renderEmails() {
          emailsList.innerHTML = '';
          emails.forEach((item, idx) => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.gap = '0.5rem';
            container.style.marginBottom = '0.7rem';

            const labelSelect = document.createElement('select');
            ['Personal', 'Work', 'Home'].forEach(option => {
              const opt = document.createElement('option');
              opt.value = option;
              opt.textContent = option;
              if (item.label === option) opt.selected = true;
              labelSelect.appendChild(opt);
            });
            labelSelect.addEventListener('change', e => {
              emails[idx].label = e.target.value;
              localStorage.setItem('emails', JSON.stringify(emails));
            });

            const emailInput = document.createElement('input');
            emailInput.type = 'email';
            emailInput.placeholder = 'Email address';
            emailInput.value = item.email || '';
            emailInput.required = false;
            emailInput.style.flex = '2';
            emailInput.addEventListener('input', e => {
              emails[idx].email = e.target.value;
              localStorage.setItem('emails', JSON.stringify(emails));
            });

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Delete';
            removeBtn.addEventListener('click', () => {
              emails.splice(idx, 1);
              localStorage.setItem('emails', JSON.stringify(emails));
              renderEmails();
            });

            container.appendChild(labelSelect);
            container.appendChild(emailInput);
            container.appendChild(removeBtn);

            emailsList.appendChild(container);
          });
        }

        addEmailBtn.addEventListener('click', () => {
          emails.push({ label: 'Personal', email: '' });
          localStorage.setItem('emails', JSON.stringify(emails));
          renderEmails();
        });
        renderEmails();

        // Phones logic
        const phonesList = document.getElementById('phones-list');
        const addPhoneBtn = document.getElementById('add-phone');
        let phones = JSON.parse(localStorage.getItem('phones') || '[]');

        function renderPhones() {
          phonesList.innerHTML = '';
          phones.forEach((item, idx) => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.gap = '0.5rem';
            container.style.marginBottom = '0.7rem';

            const labelSelect = document.createElement('select');
            ['Personal', 'Work', 'Home'].forEach(option => {
              const opt = document.createElement('option');
              opt.value = option;
              opt.textContent = option;
              if (item.label === option) opt.selected = true;
              labelSelect.appendChild(opt);
            });
            labelSelect.addEventListener('change', e => {
              phones[idx].label = e.target.value;
              localStorage.setItem('phones', JSON.stringify(phones));
            });

            const phoneInput = document.createElement('input');
            phoneInput.type = 'tel';
            phoneInput.placeholder = 'Phone number';
            phoneInput.value = item.phone || '';
            phoneInput.required = false;
            phoneInput.pattern = '^\\d{10,15}$';
            phoneInput.maxLength = 15;
            phoneInput.inputMode = 'tel';
            phoneInput.style.flex = '2';
            phoneInput.title = "Please enter a valid phone number (numbers only, 10-15 digits)";
            phoneInput.addEventListener('input', e => {
              phoneInput.value = phoneInput.value.replace(/\D/g, '');
              phones[idx].phone = phoneInput.value;
              localStorage.setItem('phones', JSON.stringify(phones));
            });

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Delete';
            removeBtn.addEventListener('click', () => {
              phones.splice(idx, 1);
              localStorage.setItem('phones', JSON.stringify(phones));
              renderPhones();
            });

            container.appendChild(labelSelect);
            container.appendChild(phoneInput);
            container.appendChild(removeBtn);

            phonesList.appendChild(container);
          });
        }

        addPhoneBtn.addEventListener('click', () => {
          phones.push({ label: 'Personal', phone: '' });
          localStorage.setItem('phones', JSON.stringify(phones));
          renderPhones();
        });
        renderPhones();

        // Form validation for at least one email and phone with label
        const form = document.getElementById('resume-form');
        form.addEventListener('submit', (e) => {
          // Check emails
          const emails = JSON.parse(localStorage.getItem('emails') || '[]');
          const validEmails = emails.filter(item => item.email && item.label);
          if (validEmails.length < 1) {
            alert('Please add at least one email with a label.');
            e.preventDefault();
            return;
          }
          // Check phones
          const phones = JSON.parse(localStorage.getItem('phones') || '[]');
          const validPhones = phones.filter(item => item.phone && item.label);
          if (validPhones.length < 1) {
            alert('Please add at least one phone number with a label.');
            e.preventDefault();
            return;
          }
        });
      });
    </script>
  </main>
</Layout>
